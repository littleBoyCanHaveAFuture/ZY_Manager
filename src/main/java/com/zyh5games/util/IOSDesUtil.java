package com.zyh5games.util;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author Administrator
 */
public class IOSDesUtil {
    private final static Pattern pattern = Pattern.compile("\\d+");

    private final static String charset = "utf-8";

    public static String encode(String src, String key) {
        try {
            byte[] data = src.getBytes(charset);
            byte[] keys = key.getBytes();
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < data.length; i++) {
                int n = (0xff & data[i]) + (0xff & keys[i % keys.length]);
                sb.append("@" + n);
            }
            return sb.toString();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return src;
    }

    public static String decode(String src, String key) {
        if (src == null || src.length() == 0) {
            return src;
        }
        Matcher m = pattern.matcher(src);
        List<Integer> list = new ArrayList<Integer>();
        while (m.find()) {
            try {
                String group = m.group();
                list.add(Integer.valueOf(group));
            } catch (Exception e) {
                e.printStackTrace();
                return src;
            }
        }

        if (list.size() > 0) {
            try {
                byte[] data = new byte[list.size()];
                byte[] keys = key.getBytes();

                for (int i = 0; i < data.length; i++) {
                    data[i] = (byte) (list.get(i) - (0xff & keys[i % keys.length]));
                }
                return new String(data, charset);
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
            return src;
        } else {
            return src;
        }
    }

    public static void main(String[] args) {
        String nt_data
        String key = "17064158093836309126535007522703";
        String s = decode(nt_data, key);

        /*nt_data
sign => '@104@155@109@158@105@104@104@106@111@103@112@103@148@152@104@158@149@111@101@151@102@111@156@149@155@112@113@105@154@110@108@106';
md5Sign => '07dae8d71374651c1f0ee4cc16a37f6e';
callback_key => '08682213938316890715589277849869';*/
//        nt_data
//        key = "07dae8d71374651c1f0ee4cc16a37f6e";
//        String s = decode(nt_data, key);

        System.out.println(s);
    }
}
