<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd"
       default-lazy-init="false">

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="200"/>    <!--  资源池中最大连接数      -->
        <property name="maxIdle" value="200"/><!-- 最大闲置 -->
        <property name="minIdle" value="10"/><!-- 最小闲置 -->
        <property name="maxWaitMillis" value="2000"/><!-- 当资源池连接用尽后，调用者的最大等待时间(单位为毫秒)-->
        <property name="testOnBorrow" value="true"/><!-- 向资源池借用连接时是否做连接有效性检测(ping)，无效连接会被移除-->
        <property name="testOnReturn" value="false"/><!--向资源池归还连接时是否做连接有效性检测(ping)，无效连接会被移除-->
        <property name="jmxEnabled" value="true"/><!-- 是否开启jmx监控，可用于监控-->
        <property name="testWhileIdle" value="true"/><!-- 是否开启jmx监控，可用于监控-->
        <property name="timeBetweenEvictionRunsMillis" value="30000"/><!--   空闲资源的检测周期(单位为毫秒)     -->
        <property name="minEvictableIdleTimeMillis" value="60000"/><!--  资源池中资源最小空闲时间(单位为毫秒)，达到此值后空闲资源将被移除      -->

    </bean>
    <!-- redis 配置,也可以把配置挪到properties配置文件中,再读取 -->
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <!-- 端口，默认6379 -->
        <constructor-arg index="2" value="6379" name="port" type="int"/>
        <constructor-arg index="3" value="5000" name="timeout" type="int"/>
        <constructor-arg index="1" value="r-bp1a0bf9408e94c4pd.redis.rds.aliyuncs.com"
                         name="host" type="java.lang.String"/>
        <constructor-arg index="4" value="ppB7xnDF6pQdZRZp" name="password" type="java.lang.String"/>

    </bean>
    <!--
        这种 arguments 构造的方式，之前配置有缺点。
        这里之前的配置有问题，因为参数类型不一致，有时候jar和环境的问题，导致参数根据index对应，会处理问题，
        理论上加另一个 name，就可以解决，现在把name 和type都加上，更保险。
     -->

    <!-- redis 的缓存 -->
    <bean id="jedisManager" class="com.ssm.promotion.core.jedis.jedisManager">
        <property name="jedisPool" ref="jedisPool"/>
    </bean>
    <!-- 全服概况 缓存实现，对ShiroCacheManager，我是采用redis的实现 -->
    <bean id="JedisRechargeCache" class="com.ssm.promotion.core.jedis.JedisRechargeCache">
        <property name="jedismanager" ref="jedisManager"/>
    </bean>
    <!--  数据库模板表读取 启动时初始化-->
    <bean id="TemplateWorker" class="com.ssm.promotion.core.sdk.TemplateWorker" init-method="init">
    </bean>
    <!--  随机id生成器-->
    <bean id="LoginIdGenerator" class="com.ssm.promotion.core.sdk.LoginIdGenerator" init-method="init">
    <property name="datacenterId" value="1"/><!-- 渠道id -->
    <property name="workerId" value="1"/><!-- 区服 -->
</bean>
    <bean id="AccountWorker" class="com.ssm.promotion.core.sdk.AccountWorker" init-method="AccountWorker">

    </bean>

</beans>